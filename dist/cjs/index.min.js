/*! *****************************************************************************
 *
 * simplengrams
 * v3.1.0
 *
 * MIT License
 * 
 * Copyright (C) 2020 Peter Hughes<https://www.phugh.es>, all rights reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
***************************************************************************** */
"use strict";
/**
 * @preserve
 * SimpleNGrams
 * v3.0.0
 *
 * Help me make this better:
 * https://github.com/phugh/simplengrams
 *
 * @name         SimpleNGrams
 * @file         index.js
 * @description  Returns a 2d array of n-grams
 * @version      3.0.0
 * @exports      nGram
 * @author       P. Hughes <peter@phugh.es> (https://www.phugh.es)
 * @copyright    2017-21 P. Hughes. All rights reserved.
 * @license      MIT
 *
 * @example
 *  import { nGram } from 'simplengrams';
 *  const txt = 'A string of text, any text what so ever!';
 *  const bigrams = nGram(txt);
 *  const trigrams = nGram(txt, 3);
 *  console.log(bigrams, trigrams);
 */function r(r,n,t){const e=[];(!0===t||Array.isArray(t))&&(r=function(r,n,t){let e=null,o=null;if(Array.isArray(t))if(2===t.length)e=t[0],o=t[1];else{if(1!==t.length)throw new Error(`Wrong number of elements in pad array. Expected 1 or 2, found ${t.length}.`);e=o=t[0]}let l=r;if(void 0!==e&&(l=new Array(n-1).fill(e).concat(r)),void 0!==o){const r=new Array(n-1).fill(o);l=l.concat(r)}return l}(r,n,t));const o=r.length-n+1;for(let t=0;t<o;t++){const o=[];for(let e=0;e<n;e++)o.push(r[t+n+(e-n)]);e.push(o)}return e}function n(n,t=2,e=!1,o=/\s+/){if(!0===function(r,n,t,e){return Boolean(null!=r&&("string"==typeof r||Array.isArray(r))&&null!=n&&"number"==typeof n&&!Number.isNaN(n)&&null!=t&&("boolean"==typeof t||Array.isArray(t))&&null!=e&&("string"==typeof e||e instanceof RegExp))}(n,t,e,o))return"string"==typeof n&&(n=n.split(o)),t>n.length&&!1===e?[Array.from(n)]:r(n,t,e);throw new SyntaxError("Invalid arguments. Expected nGram(string | string[], number, boolean | string[], string | RegExp)")}exports.nGram=n,exports.ngram=function(r,t=2,e=!1,o=/\s+/){return n(r,t,e,o)};
//# sourceMappingURL=index.min.js.map
